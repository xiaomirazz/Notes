1-为了保证程序的可移植性能，要使用int main（）而不是void main（）

2-区分0的4种面孔
  整形0、空指针null、字符串结束标志\0、逻辑false。
  
3-避免那些由运算符引发的混乱
  if(value = 0)x      ---->   if(0 == value)
  & && | || 

4-对表达式运算顺序不要想当然
  不要吝啬使用括号来确定运算顺序。
  对于同一语句的估值问题，可以用变量来确定参数或运算数的值，避免出现意料之外的结果。
  
5-小心#define中的使用陷阱
  要有完备的括号
  使用宏时要保证参数不发生变化（++ --副作用）
  用大括号将宏所定义的多条表达式括起来
  
6-不要忘记指针变量的初始化
  避免访问野地址。
  
7-明晰逗号分隔表达式的奇怪之处
  表达1，表达2，表达3……表达n    表达式的值为表达n的值，之前的表达式保证执行

8-时刻提防内存溢出

9-拒绝晦涩难懂的函数指针

10-防止重复包含头文件
  #ifndef #define #endif
  名字定义为_PROJECT_PATH_FILE_H

11-优化结构体中元素的布局
  由于结构体内存对齐的问题，优化布局可以节省内存空间。
  #pragma pack（n）可以改变内存对齐的字节数

12-将强制转型减少到最少
  const_cast<T*>(a) 用于去除const、volatile和__unaligned
  dynamic_cast<T*>(a) 将a转化为T*类型的指针，向下安全，父类子类转化
  reinterpret_cast<T*>(a) 用于将一个类转化为不相关类
  static_cast<T*>(a) 将a的值转换为T类型
  
13-优先使用前缀操作符++ --
  前缀运算符不用构建临时对象，所以效率略优于后缀操作符
  
14-掌握变量定义的位置与时机
  优于构造和析构函数不可避免地会带来一些开销，建议在需要使用变量时再去定义。
  建议定义越local越好，尽量避免变量作用域的膨胀，减少变量名污染和调高代码阅读性。
  
15-小心typedef中的陷阱
  小心typedef与#define的区别，宏只替换一次，如果是指针切声明多个变量会有不同。宏只第一个变量为指针，typedef则可以多
