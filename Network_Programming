int close(int fd)并非总是关闭一个连接，而是将fd的引用技术减1.
当fd的引用计数为0时，才真正关闭连接.

在多进程程序中，一次fork会使父进程中的socket引用计数加1，因此我们必须在父进程和子进程中都调用close才能将连接关闭.

int shutdown(int sockfd,int howto)用来终止连接，howto可以决定关闭读或写，或者都关闭。成功返回0.

通用数据读写函数：
#include<sys/socket.h>
ssize_t recvmsg(int sockfd,struct msghdr* msg,int flags);
ssize_t sendmsg(int sockfd,struct msghdr* msg,int flags);

msghdr结构：
struct msghdr
{
  void *msg_name;   //socket地址
  socklen_t msg_namelen;  //socket地址长度
  struct iovec* msg_iov;    //分散的内存块
  int msg_iovlen;   //分散内存块的数量
  void* msg_control;    //指向辅助数据的起始位置
  socklen_t msg_controllen;     //辅助数据的大小
  int msg_flags;      //复制函数中的flags参数，并在调用过程中更新
};
msg_name指向一个socket地址结构变量，指定通信对方的socket地址。对于TCP该成员必须设置为NULL。
msg_iov是iovec结构体类型的指针。
struct iovec
{
  void *iov_base;
  size_t iov_len;
};

int sockatmark(int sockfd);检测sockfd是否处于带外标记，如TCP紧急标志。

int getsockname(int sockfd,struct sockaddr* address,socklen_t* address_len);
获取sockfd对应的本端socket地址，并将其存储在address参数指定的内存中，成功返回0.
int getpeername(int sockfd,struct sockaddr* address,socklen_t* address_len);
获取sockfd对应的远端socket地址，其他参数同上。

int getsockopt(int sockfd,int level,int option_name,void* option_value,socklen_t* restrict option_len);
int setsockopt(int sockfd,int level,int option_name,const void* option_value,socklen)t option_len);
专门用来读取和设置socket文件描述符的属性方法。
服务器监听时一些socket是由accept返回，这样如果需要返回的socket有某些选项，则应当对监听socket设置那些选项，这样accept的
连接socket会自动继承这些选项。
对于客户端，这些socket选项应该在调用connect函数之前设置，因为connect调用成功返回之后，TCP三次握手完成。
几个重要选项：
SO_REUSEADDR：用来强制使用被处于TIME_WAIT状态的连接占用的socket地址。设置过后，即使sock处于TIME_WAIT状态，与之绑定的socket
              地址也可以立即被重用。此外我们也可以通过修改/proc/sys/net/ipv4/tcp_tw_recycle参数来快速回收被关闭的socket。
SO_RCVBUF和SO_SNDBUF：分别表示TCP接受缓冲和发送缓冲。当我们用来设置TCP的接受和发送缓冲区大小的时候，系统都将其加倍并不得
              小于某个最小值（接收256，发送2048）此外，我们可以直接修改内核参数/proc/sys/net/ipv4/tcp_rmem和
              /proc/sys/net/ipv4/tcp_wmem来强制TCP接收和发送缓冲区的大小没有限制。
SO_RCVLOWAT和SO_SNDLOWAT：分别表示TCP接收缓冲区和发送缓冲区的低水位标记。它们一般被IO复用系统调用用来判断socket是否可读写。
              当TCP接收缓冲区刻度数据的总数大于低水位标记的时候，IO复用系统调用将通知应用程序可以从对应的socket上读取数据。
              当TCP发送缓冲区的空闲空间大于其低水位标记的时候，IO复用系统调用将通知应用程序可以往对应的socket上写入数据。
              默认情况下，这两个标记都为1.
SO_LINGER:用于控制close系统调用在关闭TCP连接时的行为。默认情况下，当我们close一个socket时，close将立即返回，TCP模块负责把该
              socket对应的TCP发送缓冲区中残留的数据发送给对方
              
网络信息API:
struct hostent* gethostbyname(const char* name);
根据主机名称获取主机的完整信息。通常先在/etc/hosts配置文件中查找主机，没找到再去找DNS服务器。
struct hostend* gethostbyaddr(const void* addr,size_t len,int type);
根据IP地址获取主机的完整信息。
struct hostent
{
  char* h_name;主机姓名
  char** aliases;主机别名列表
  int h_addrtype;地址类型
  int h_length;地址长度
  char** h_addr_list;按网络字节序列出的主机IP地址列表
};

struct servent* getservbyname(const char* name,const char* proto);
根据名称获取某个服务的完整信息。
struct servent* getservbyport(int port,const char* proto);
根据端口号获取某个服务的完整信息。
proto参数指定服务类型tcp为流服务，udp为数据报服务。
他们都是通过读取/etc/services文件来获取服务的信息的。
struct servent
{
  char* s_name;
  char** s_aliases;
  int s_port;
  char* s_proto;
};
以上4个函数都是不可重入的，netdb.h给出了可重入版本原名后面加_r

int getaddrinfo(const char* hostname,const char* service,const struct addrinfo* hints, struct addrinfo** result);
能通过主机名获得IP地址，也能通过服务名获得端口号
struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  char* ai_canonname;
  struct sockaddr* ai_addr;
  struct addrinfo* ai_next;
};
此函数将隐式地分配堆内存，所以getaddrinfo调用结束后，我们必须调用void freeaddrinfo(struct addrinfo* res)释放内存;

int getnameinfo(const struct sockaddr* sockaddr,socklen_t addrlen,char* host,socklen_t hostlen,char* serv,socklen_t servlen,
  int flags);
能通过socket地址同时获得以字符串表示的主机名和服务名。

const char* gai_strerror(int error);
可以把错误码转换成字符串形式。

--------------------------------------------------------------------------------------------------------------------------
高级IO函数
int pipe(int fd[2]);
pipe函数可用于创建一个管道，以实现进程间通信。成功返回1。
fd[0]和fd[1]构成管道的两端，往fd[1]写入的数据可以从fd[0]读出。并且fd[0]只能从管道读，fd[1]只能用于往管道写入。不能反过来。
如果要实现双向的数据传输，就应该使用两个管道。默认情况下，这一对文件描述符是阻塞的。此时如果我们用read读一个空管道则read
将被阻塞，直到管道内有数据可读。如果用write往一个满的管道中写入数据，则write将被阻塞，直到管道有空间可用。
int socketpair(int domain,int type,int protocol,int fd[2]);
fd两个描述符都是既可读又可写的。

int dup(int file_descripter);
创建一个新的文件描述符，该文件描述符和f_d指向相同的文件、管道或者网络连接。dup返回的文件描述符总是取当前可用的最小值。
int dup2(int file_des_one,int file_des_two);
dup2和dup类似，不过它返回第一个不小于file_des_two的整数值。
这两个函数创建的文件描述符并不继承原文件描述符的属性。

CGI服务器基本原理：
int connfd = accept();
if(connfd<0)
return;
else
{
  close(STDOUT_FILENO);
  dup(connfd);
  printf("abcd\n");
  close(connfd);
}
用connfd取代了服务器的标准输出。

ssize_t readv(int fd,const struct iovec* vector,int count);
ssize_t writev(int fd,const struct iovec* vector,int count);
read从文件描述符读到分散的内存中，write将多块分散内存写入到文件描述符中。

ssize_t sendfile(int out_fd,int in_fd,off_t* offset,size_t count);
在两个文件描述符之间直接传递数据，从而避免了内核缓冲区和用户缓冲区之间的数据拷贝，效率更高。成功返回字节数。

void* mmap(void *start,size_t length,int prot,int flags,int fd,off_t offset);
start允许用户指定一个特定的地址作为内存的起始地址，如果设置成NULL则系统自动分配一个地址。length参数指定内存段的长度。
prot参数用来设置内存段的访问权限。flags参数控制内存段内容被修改后程序的行为。

ssize_t splice(int fd_in,loff_t* off_in,int fd_out,loff_t* off_out,size_t len,unsigned int flags);
用于在两个文件描述符之间的移动数据。

ssize_t tee(int fd_in,int fd_out,size_t len,unsigned int flags);
用于在两个管道文件描述符之间复制数据，也是零拷贝操作。它不消耗数据，后续还可以继续读。

int fcntl(int fd,int cmd,...);
提供了对文件描述符的各种操作，另外一个常见的控制文件描述符属性和行为的是ioctl，而且ioctl比fcntl能够执行更多的控制。
但是对于控制文件描述符常用的属性和行为，fcntl函数式由posix规范制定的首选方法。
int munmap(void* start,size_t length);
-----------------------------------------------------------------------------------------------------------------
服务器程序规范：
1-linux服务器程序一般以后台进程形式运行，又称守护进程。
2-linux服务器通常有一套日志系统，它至少能输出日志到文件，有的高级服务器还能输出日志到专门的UDP服务器，大部分后台进程都在
  /var/log目录下有自己的日志目录。
3-linux服务器程序一般以某个专门的非root身份运行。比如mysqld、httpd、syslogd等后台进程，分别拥有自己的运行账户。
4-linux服务器程序通常是可配置的，配置在/etc下面。
5-linux服务器进程通常会在启动的时候生成一个PID文件并存入/var/run目录中，以记录该后台进程的PID。如syslogd的文件是
  /var/run/syslogd/pid
6-linux服务器程序一般要考虑系统资源和限制，以预测自身能够承受多大的负荷，比如进程可用文件描述符总数和内存总量等。


Linux提供syslogd和rsyslogd（升级版）来处理系统日志。
rsyslogd既可以接收用户进程输出的日志，又能接收内核日志。
用户通过调用syslog函数生成系统日志，该函数将日志输出到一个unix本地域socket类型的文件/dev/log中，rsyslogd则监听该文件
  以获取用户进程的输出。
内核日志在老的系统上则是通过另外一个守护进程rklogd来管理的。rsyslogd利用额外的模块实现了相同的功能。
内核日志通过printk等函数打印到内核的环状缓存中，环状缓存内容直接映射到/proc/kmsg文件中。rsyslogd则通过读取该文件获得内核日志。
rsyslogd守护进程在接收到用户或者内核进程的输入日志后会把他们输出到某些特定的日志文件。如调试信息/var/log/debug
  普通信息/var/log/messages，内核保存至/var/log/kern.log
具体对rsyslogd的配置在/etc/rsyslog.conf中。


void syslog(int priority,const char* msg);
应用程序使用syslog与rsyslogd守护进程通信。

void openlog(const char* ident,int logopt,int facility)
可以改变syslog的默认输出方式，ident指定的字符串会被添加到日志信息的日期和时间后，logopt对后续行为进行配置，facility改变syslog
  函数中的默认设施值。

int setlogmask(int maskpri);
过滤日志。

void closelog();
关闭日志功能。

int getrlimit(int resource,struct rlimit *rlim);
取系统资源限制
int setrlimit(int resource,const struct rlimit *rlim);
设定系统资源限制
resource为资源类型，rlim是资源限定结构体指针
struct rlimit{
  rlim_t rlim_cur;软限制 
  rlim_t rlim_max;硬限制
};


linux web服务根目录一般在/var/www/
char* getcwd(char* buf,size_t size);
获取当前进程工作目录，buf指向的内存用于存储当前的绝对路径名，size为大小
int chdir(const char* path);
改变进程工作目录，path指定要切换的目录路径
int chroot(const char* path);
path指定要切换到的目标根目录


将服务器程序以守护进程的方式运行
bool daemonize()
{
  /*创建子进程，关闭父进程，这样可以使程序在后台运行*/
  pid_t pid = fork();
  if(pid<0)
  {
    return false;
  }
  else if(pid>0)
  {
    exit(0);
  }
  
  umask(0) //设置文件权限掩码
  
  /*创建新的会话，设置本进程为进程组的首领*/
  pid_t sid = setsid();
  if(sid<0)
  {
    return false;
  }
  
  /*切换工作目录*/
  if((chdir("/"))<0)
  {
    return false;
  }
  /*关闭标准输入输出*/
  close(STDIN_FILENO);
  close(STDOUT_FILENO);
  close(STDERR_FILENO);
  
  /*定向新的输入输出*/
  open("/dev/null",O_RDONLY);
  open("/dev/null",O_RDWR);
  open("/dev/null",O_RDWR);
  return true;
}

实际上linux也提供了api
int daemon(int nochdir,int noclose);
nochdir标记是否改变工作目录，传0则该表到根目录。
noclose参数为0时，标准输入，标准输出和标准错误输出都重定向到/dev/null.
成功返回0，失败返回-1并置errno

  
}




---------------------------------------------------------------------------------------------------------
高性能服务器程序框架

IO处理单元   请求队列   逻辑单元（多个）   请求队列   网络存储单元

IO处理单元是服务器管理客户连接的模块。它通常完成以下工作：等待并接受新的客户连接，接受客户数据，将服务器响应数据返回给客户端。
  但是接受的数据不一定在IO处理单元中执行，也可能在逻辑单元中执行，具体在何处执行取决于事件处理模式。对于一个服务器集群来说，
  IO处理单元是一个专门的接入服务器。它实现负载均衡，从所有逻辑服务器中选取负荷最小的一台来为新客户服务。

一个逻辑单元通常是一个进程或者线程。它分析并处理客户数据，然后将结果传递给IO处理单元或者直接发给客户端。对服务器集群而言，一个
  逻辑单元本身就是一台逻辑服务器。服务器通常拥有多个逻辑单元，以实现对多个客户人物的并行处理。
  
网络存储单元可以使数据库，缓存和文件，甚至是一台独立的服务器。但它不是必须的，比如ssh、telnet等登陆服务就不用这个单元。

请求队列是各单元之间通信方式的抽象。

------------------------------------------------------------------------------------------------------------------------------
IO模型

socket的基础API中，可能被阻塞的系统调用包括accept、send、recv、和connect。

IO复用函数（select、poll、epoll_wait）他们本身是阻塞的，它们能够提高程序效率的原因在于它们具有同时监听多个IO事件的能力。

我们只有在事件已经发生的情况下去操作非阻塞IO才能提高程序的效率。
-------------------------------------------------------------------------------------------------------------------------------
Reactor模式

它要求主线程只负责监听文件描述符上是否有事件发生，有的话立即将该事件通知工作线程。除此外，主线程不做任何其他实质性的工作。
读写数据，接收新连接，以及处理客户请求均在工作线程中完成。

使用同步IO模型（epool_wait）实现reactor模式的工作流程是：
1、主线程往epoll内核事件中注册socket上的读就绪事件。
2、主线程调用epoll_wait等待socket上有数据可读。
3、当socket上有数据可读的时候，epoll_wait通知主线程。主线程将socket可读事件放入请求队列。
4、睡眠在请求队列上的某个工作线程被唤醒，它从socket读入数据，并处理客户请求，然后往epoll内核时间表中注册该socket上的写就绪事件。
5、主线程调用epoll_wait等待socket可写。
6、当socket可写的时候，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。
7、睡眠在请求队列上的某个线程被唤醒，它往socket上写入服务器处理客户请求的结果。

------------------------------------------------------------------------------------------------------------------------------
Proactor模式

将所有IO操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。

使用异步IO模型（aio_read和aio_read为例）实现的工作流程。

1、主线程调用aio_read函数向内核注册socket上的读完成事件，并告诉内核用户读缓冲区的位置。以及操作完成如何通知应用 程序。
2、主线程继续处理其他逻辑。
3、当socket上的数据被读入用户缓冲区后，内核将向应用程序发送一个信号，以通知应用程序数据已经可用。
4、应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求。工作线程处理完客户请求之后，调用aio_write函数向内核注册
  socket上的写完成事件并告诉内核用户写缓冲区的位置，以及写操作完成时如何通知应用程序。
5、主线程继续处理其他逻辑。
6、当用户缓冲区的数据被写入socket之后，内核将向应用程序发送一个信号，以通知应用程序数据已经发送完毕。
7、应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理，比如决定是否关闭socket。

------------------------------------------------------------------------------------------------------------------------------
模拟Proactor模式

工作流程：
1、主线程往epoll内核事件表中注册socket上的读就绪事件。
2、主线程调用epoll_wait等待socket上有数据可读。
3、当socket有数据可读的时候，epoll_wait通知主线程。主线程从socket循环读取数据，指导没有更多数据可读，然后将读取到的数据封装
成一个请求对象插入请求队列。
4、睡眠在请求队列上的某个工作线程被唤醒，它获得请求对象并处理客户请求，然后往epoll内核事件表中注册socket上的写就绪事件。
5、主线程调用epoll_wait等待socket可写。
6、当socket可写时，epoll_wait通知主线程。主线程往socket上写入服务器处理客户请求的结果。

------------------------------------------------------------------------------------------------------------------------------
简单的有限状态机
state_machine()
{
  state cur_state = typeA;
  while(cur_state != typeC)
  {
    package pack = getNewPackage();
    switch(cur_state)
    {
      case typeA:
        process_package_state_A(pack);
        cur_state = typeB;
        break;
      case typeB:
        process_package_state_B(pack);
        cur_state = typeC;
        break;
    }
  }
}

----------------------------------------------------------------------------------------------------------------------------
HTTP请求的读取和分析

#define BUFFER_SIZE 4096

enum CHECK_STATE{CHECK_STATE_REQUESTLINE=0,CHECK_STATE_HEADER};

enum LINE_STATUS{LINE_OK = 0, LINE_BAD,LINE_OPEN};

enum HTTP_CODE{NO_REQUEST,GET_REQUEST,BAD_REQUEST,BAD_REQUEST,FORBIDDEN_REQUEST,INTERNAL_ERROR,CLOSED_CONNECTION};

static const char* szret[] = {"I get a correct result\n","Something wrong\n"};

LINE_STATUS parse_line(char* buffer,int& checked_index,int& read_index)
{
  char temp;
  for(;checked_index < read_index; ++checked_index)
  {
    temp = buffer[checked_index];
    if(temp == '\r')
    {
      if((checked_index +1) == read_index)
      {
        return LINE_OPEN;
      }
      else if(buffer[checked_index + 1] =='\n')
      {
        buffer[checked_index++] = '\0';
        buffer[checked_index++] = '\0';
        return LINE_OK;
      }
      return LINE_BAD;
    }
    else if(temp == '\n')
    {
      if((checked_index>1)&&buffer[checked_index - 1]=='\r')
      {
        buffer[checked_index -1] = '\0';
        buffer[checked_index++] = '\0';
        return LINE_BAD;
      }
    }
    return LINE_OPEN;
  }
}


HTTP_CODE parse_requestline(char* temp,CHECK_STATE& checkstate)
{
  char* url = strpbrk(temp,"\t");
  if(!url)
  {
    return BAD_REQUEST;
  }
  
  *url++ = '\0';
  
  char* method = temp;
  if(strcasecmp(method,"GET") == 0)
  {
    printf("GET!")；
  }
  else
  {
    return BAD_REQUEST;
  }
  
  url+= strspn(url,"\t");
  char* version = strpbrk(url," \t");
  if(!version)
  {
    return BAD_REQUEST;
  }
  
  *version++ = '\0';
  version += strspn(version," \t");
  
  if(strcasecmp(version,"HTTP/1.1")!=0)
  {
    return BAD_REQUEST;
  }
  
  if(strncasecmp(url,"http://",7) == 0)
  {
    url += 7;
    url = strchr(url,'/');
  }
  
  if(!url | url[0] !='/')
  {
    return BAD_REQUEST;
  }
  printf("the request url is %s\n",url);
  checkstate = CHECK_STATE_HEADER;
  return NO_REQUEST;
}

HTTP_CODE parse_headers(char* tmp)
{
  if(temp[0] == '\0')
  {
    return GET_REQUEST;
  }
  else if(strncasecmp(temp,"Host:",5)==0)
  {
    temp += 5;
    temp += strspn(temp,"\t");
    printf("the request host is:%s\n",temp);
  }
  else
  {
    printf("I can not handle this header\n");
  }
  return NO_REQUEST;
}

HTTP_CODE parse_content(char* buffer,int& checked_index,CHECK_STATE& checkstate, int& read_index,int& start_line)
{
  LINE_STATUS linestatus = LINE_OK;
  HTTP_CODE retcode = NO_REQUEST;
  while((linestatus = parse_line(buffer,checked_index,read_index))==LINE_OK)
  {
    char* temp = buffer+start_line;
    start_line = checked_index;
    switch(checkstate)
    {
      case CHECK_STATE_REQUESTLINE:
      {
        retcode = parse_requestline(temp,checkstate);
        if(retcode == BAD_REQUEST)
        {
          return BAD_REQUEST;
        }
        break;
      }
      case CHECK_STATE_HEADER:
      {
        retcode = parse_headers(temp);
        if(retcode == BAD_REQUEST)
        {
          return BAD_REQUEST;
        }
        else if(retcode == GET_REQUEST)
        {
          return GET_REQUEST;
        }
        break;
      }
      default:
      {
        return INTERNAL_ERROR;
      }
    }
  }
  if(linestatus == LINE_OPEN)
  {
    return NO_REQUEST;
  }
  else
  {
    return BAD_REQUEST;
  }
}

int main(int argc,char* argv[])
{
  if(argc <= 2)
  {
    printf("usage: %s ip_addres port_number\n",basename(argv[0]));
    return 1;
  }
  const char* ip=argv[1];
  int port= atoi(argv[2]);
  
  struct sockaddr_in address;
  bzero(&address,sizeof(address));
  address.sin_family = AF_INET;
  inet_pton(AF_INET,ip,&address.sin_addr);
  address.sin_port = htons(port);
  
  int listenfd=socket(PF_INET,SOCK_STREAM,0);
  assert(listenfd>=0);
  
  int ret = bind(listenfd,(struct sockaddr*)&address,sizeof(address));
  assert(ret != -1);
  
  ret = listen(listenfd,5);
  assert(ret != -1);
  
  strcut sockaddre_in client_address;
  socklen_t client_addrlength = sizeof(client_address);
  
  int fd = accept(listenfd,(struct sockaddr*)&client_address,&client_addrlength);
  
  if(fd<0)
  {
    printf("error");
  }
  else
  {
    char buffer[BUFFER_SIZE];
    memset(buffer,'\0',BUFFER_SIZE);
    int data_read = 0;
    int read_index = 0;
    int checked_index = 0;
    int start_line = 0;
    
    CHECK_STATE checkstate = CHECK_STATE_REQUESTLINE;
    while(1)
    {
      data_read = recv(fd,buffer+read_index,BUFFER_SIZE = read_index,0);
      if(data_read == -1)
      {
        printf("reading failed\n");
        break;
      }
      else if(data_read == 0)
      {
        printf("remote client has closed the connection\n");
        break;
      }
      read_index+=data_read;
      HTTP_CODE result = parse_content(bufer,checked_index,checkstate,read_index,start_line);
      if(result == NO_REQUEST)
      {
        continue;
      }
      else if(result == GET_REQUEST)
      {
        send(if,szret[0],strlen(szret[0],0));
        break;
      }
      else
      {
        send(fd,szret[1],strlen(szret[1]),0);
        break
      }
    }
    close(fd);
  }
  close(listenfd);
  return 0;
}

-----------------------------------------------------------------------------------------------------------------
提高服务器性能的其他建议

1池
2数据复制
3上下文切换
-------------------------------------------------------------------------------------------------------------------
第九章 io复用
-------------------------------------------------------------------------------------------------------------------
select
int select(int nfds,fd_set* readfds,fd_set* writefds,fd_set* exceptfds,struct timeval* timeout)

先说最后一个参数，它指定愿意等待的时间。
struct timeval
{
     long tv_sec;
     long tv_usec;
};
有3种情况:
timeout == NULL
永远等待。如果捕捉到一个信号则中断此无限期等待。当所指定的描述符中的一个已准备好或捕捉到一个信号则返回。如果捕捉到一个信号，则select返回-1，errno设置为EINTR.
 
timeout->tv_sec = 0 && timeout->tv_usec = 0
完全不等待。测试所有指定的描述符并立即返回。这是得到多个描述符的状态而不阻塞select函数的轮询方法。
 
timeout->tv_sec != 0 || timeout->tv_usec != 0
 
等待指定的秒数和微秒数。
 
注意：
（1）千万不要混淆了timeout == NULL与timeout->tv_sec = 0 && timeout->tv_usec = 0这2种情况，结果截然不同。
（2）timeout->tv_sec != 0 || timeout->tv_usec != 0这种情况下，超时过后，就变成了
 timeout->tv_sec = 0 && timeout->tv_usec = 0。
 
中间的三个参数readfds,writefds和exceptfds是指向描述符集的指针。这三个描述符集说明了我们关心的可读、可写或处于异常条件的各个描述符。每个描述符放在一个fd_set数据类型中。这种数据类型为每一可能的描述符保持了一位。
 
对fd_set数据类型可以进行处理的是：分配一个这种类型的变量；将这种类型的一个变量赋予同类型的另一个变量；或对于这种类型的变量使用下列四个函数中的一个。
 
#include <sys/select.h>
int  FD_ISSET(int fd,fd_set *fdset);
void FD_CLR(int fd,fd_set *fdset);
void FD_SET(int fd,fd_set *fdset);
void FD_ZERO(int fd,fd_set *fdset);
 
这些接口可实现为宏或函数。具体意见就不多说了。
 
int select(int maxfdp1,fd_set *readfds,fd_set *writefds,fd_set *exceptfds,struct timeval *timeout);
 
因为描述符编号从0开始，所以要在最大描述符编号值上加1.第一个参数实际上是要检查的描述符数（从描述符0开始）
select有三个可能的返回值。
（1）返回值-1表示出错。出错是有可能的，例如在所指定的描述符都没有准备好时捕捉到一个信号。在此种情况下，将不修改其中任何描述符集。
（2）返回值0表示没有描述符准备好。若指定的描述符都没有准备好，而且指定的时间已经超过，则发生此种情况。此时，所有描述符集皆被清0.
（3）正返回值表示已经准备好的描述符数。
 
注意红色部分，超时后，每次描述符集都需要重新设置。
 
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/select.h>
#include <netdb.h>
int main(int argc,char *argv[])
{
 int listen_fd;
 int client_fd;
 socklen_t clt_len;
 struct sockaddr_in srv_addr;
 struct sockaddr_in clt_addr;
 int port;
 int ret;
 int len;
 int num;
 char recv_buf[1024];
 fd_set read_fds;
 struct timeval wait_time;
 if(argc != 2)
 {
  printf("Usage: %s port_name\n",argv[0]);
  return 1;
 }
 
 port = atoi(argv[1]);
 listen_fd = socket(PF_INET,SOCK_STREAM,0);
 if(listen_fd < 0){
  perror("cannot create socket");
  return 1;
 }
 memset(&srv_addr,0,sizeof(srv_addr));
 srv_addr.sin_family=AF_INET;
 srv_addr.sin_addr.s_addr=htonl(INADDR_ANY);
 srv_addr.sin_port=htons(port);
 ret = bind(listen_fd,(struct sockaddr*)&srv_addr,sizeof(srv_addr));
 if(ret < 0)
 {
  perror("cannot bind the socket");
  return 1;
 }
 ret = listen(listen_fd,1);
 if(ret == -1)
 {
  perror("cannot listen the client connect request");
  close(listen_fd);
  return 1;
 }
    wait_time.tv_sec=0;
 wait_time.tv_usec=0;
 FD_ZERO(&read_fds);
 FD_SET(listen_fd,&read_fds);
  
 while(1)
 { 
     FD_ZERO(&read_fds);
     FD_SET(listen_fd,&read_fds);
   ret = select(listen_fd + 1,&read_fds,NULL,NULL,&wait_time);   
        if(ret > 0)
        {        
            if(FD_ISSET(listen_fd,&read_fds) > 0)
            {                 
                len = sizeof(clt_addr);
                client_fd = accept(listen_fd,(struct sockaddr*)&clt_addr,&len);
                if(client_fd < 0)
                {         
                    perror("cannot accept client connect request");
                    close(listen_fd);
                    return 1;  
                }
                while(1)
                {
                    FD_ZERO(&read_fds);
                    FD_SET(client_fd,&read_fds);    
                    if(select(client_fd + 1,&read_fds,NULL,NULL,&wait_time) > 0)
                    {                
                        if(FD_ISSET(client_fd,&read_fds) > 0)
                        {
                            len = read(client_fd,recv_buf,sizeof(recv_buf));
                            if(len > 0)
                            {
                                recv_buf[len] = 0;
                                printf("%s\n",recv_buf);
                                write(client_fd,recv_buf,len);
                            }
                            else
                            {
                                close(client_fd);
                                break;
                            }
                        }                   
                    }                   
                }           
               
           }     
                              
        } 
        
 }
}
